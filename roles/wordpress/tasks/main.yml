---
  - name: check if mysql client is installed
    stat: path=/usr/bin/mysql
    register: the_mysql_client

  - name: install mysql client
    apt: pkg=mysql-client state=latest update_cache=yes cache_valid_time=3600
    # To prevent collision with MariaDB
    when: the_mysql_client.stat.exists == false

  - name: install Python mysql lib
    # required for ansible mysql modules to work
    apt: pkg=python-mysqldb state=latest update_cache=yes cache_valid_time=3600

# Could not get ansible to work at all with the .my.cnf
  - name: create the wordpress database
    mysql_db: >
      name={{ wordpress_db_name }}
      state=present
      login_host={{ mysql_host }}
      login_user={{ mysql_root_user }}
      login_password={{ mysql_root_pass }}

  - name: create Wordpress database credentials
    mysql_user: >
      name={{ wordpress_db_user }}
      host={{ 'localhost' if mysql_host=='localhost' else ansible_default_ipv4.address }}
      priv={{wordpress_db_name}}.*:ALL
      password={{ wordpress_db_pass }}
      login_host={{ mysql_host }}
      login_user={{ mysql_root_user }}
      login_password={{ mysql_root_pass }}

  - name: create the wordpress directories
    file: >
      path={{ item }}
      state=directory
      owner={{webmaster}}
      group={{webmaster}}
      mode=0755
    with_items:
      - "{{ wordpress_home }}"
      - "{{ wordpress_home }}/bin"
      - "{{ wordpress_home }}/plugins"
      - "{{ wordpress_home }}/media/themes"
      - "{{ wordpress_home }}/wp{{ wordpress_version }}"

  - name: set permissions on wordpress wp-content directory
    # must be writable by web server
    file: >
      path={{ wordpress_home }}/media/uploads
      state=directory
      owner={{webmaster}}
      group={{ webserver_user }}
      mode=0775

  - name: generate secret keys for Wordpress config
    get_url: >
      url=https://api.wordpress.org/secret-key/1.1/salt/
      dest={{ wordpress_home }}/wp-secret-keys.php
      owner={{webmaster}}
      group={{ webserver_user }}
      mode=0640
  - name: open php tag in secret keys config
    lineinfile: >
      dest={{ wordpress_home }}/wp-secret-keys.php
      insertbefore=BOF
      line="<?php"
  - name: close php tag in secret keys config
    lineinfile: >
      dest={{ wordpress_home }}/wp-secret-keys.php
      insertafter=EOF
      line="?>"

  - name: install wp-config template
    # Note that wp-config should be installed BEFORE installing the Wordpress
    # archive, to prevent a brief window of security vulnerability.
    template: src=wp-config.php.j2
              dest={{ wordpress_home }}/wp-config.php
              owner={{webmaster}}
              group={{ webserver_user }}
              mode=0640

  - name: install htpasswd file for wordpress
    # Store outside the docroot! Set up to be readable only by web server
    htpasswd: path={{ wordpress_home }}/htpasswd
              state=present
              name={{webmaster}}
              password={{ webmaster_pass }}
              owner={{webmaster}}
              group={{ webserver_user }}
              mode=0640

  - name: download wordpress archive
    sudo_user: "{{ webmaster }}"
    get_url: url=https://downloads.wordpress.org/release/wordpress-{{ wordpress_version }}.tar.gz
             sha256sum={{ wordpress_sha256 }}
             dest={{ wordpress_home }}/wp{{ wordpress_version }}.tar.gz

  - name: extract the wordpress archive
    sudo_user: "{{ webmaster }}"
    command:  tar -C {{ wordpress_home }}/wp{{ wordpress_version}} -xzf
              {{ wordpress_home }}/wp{{ wordpress_version}}.tar.gz --strip-components=1
              creates={{ wordpress_home }}/wp{{ wordpress_version}}/index.php

  - name: fix ownership of wordpress code files
    file: path={{ wordpress_home }}/wp{{ wordpress_version}}
          state=directory
          owner={{webmaster}}
          group={{webmaster}}
          mode="u=rwX,g=rX,o=rX"
          recurse=yes

  - name: force the code symlink to point to the newly installed wordpress
    file: path={{ wordpress_home }}/public_html
          state=link
          src={{ wordpress_home }}/wp{{ wordpress_version }}
          owner={{webmaster}}
          group={{webmaster}}

  - name: symlink wordpress themes into the content directory
    # If you don't do this, wordpress can't find its default themes.
    # NOTE: Use of wildcards requires use of ``shell`` vs ``command``.
    sudo_user: "{{ webmaster }}"
    shell: ln -sf {{ wordpress_home }}/public_html/wp-content/themes/* {{ wordpress_home }}/media/themes/
          creates={{ wordpress_home }}/media/themes/index.php

  - name: download the wordpress CLI
    get_url: url=https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
             dest={{ wordpress_home }}/bin/wp
             owner={{ webmaster }}
             group={{ webmaster }}
             mode=0755

  - name: install the wordpress tables in the database
    # required for subsequent wp commands to work
    sudo_user: "{{ webmaster }}"
    command: "{{ wordpress_home }}/bin/wp core install
              --url={{ wordpress_url }}
              --title={{ wordpress_title }}
              --admin_user={{ wordpress_admin_user }}
              --admin_password={{ wordpress_admin_pass }}
              --admin_email={{ wordpress_email }}
             chdir={{ wordpress_home }}/public_html"

  - name: install Google Analytics plugin
    sudo_user: "{{ webmaster }}"
    command: "{{ wordpress_home }}/bin/wp plugin install google-analytics-dashboard-for-wp
             chdir={{ wordpress_home }}/public_html
             creates={{ wordpress_home }}/plugins/google-analytics-dashboard-for-wp"

  - name: install Cache plugin
    sudo_user: "{{ webmaster }}"
    command: "{{ wordpress_home }}/bin/wp plugin install w3-total-cache
             chdir={{ wordpress_home }}/public_html
             creates={{ wordpress_home }}/plugins/w3-total-cache"

  - name: install loader for Cache plugin
    template: >
      src=w3tc-wp-loader.php
      dest={{ wordpress_home }}/plugins/w3tc-wp-loader.php
      owner={{ webmaster }}
      group={{ webmaster }}
      mode=0644

  - name: install SEO plugin
    sudo_user: "{{ webmaster }}"
    command: "{{ wordpress_home }}/bin/wp plugin install wordpress-seo
             chdir={{ wordpress_home }}/public_html
             creates={{ wordpress_home }}/plugins/wordpress-seo"

  - name: install PressForward plugin
    sudo_user: "{{ webmaster }}"
    command: "{{ wordpress_home }}/bin/wp plugin install pressforward
             chdir={{ wordpress_home }}/public_html
             creates={{ wordpress_home }}/plugins/pressforward"

  - name: install apache vhost for wordpress
    notify: restart apache
    template: src=wordpress_vhost.j2
              dest=/etc/apache2/sites-available/{{ wordpress_domain }}.conf

  - name: enable the wordpress apache vhost
    notify: restart apache
    command: a2ensite {{ wordpress_domain }}
             creates=/etc/apache2/sites-enabled/{{ wordpress_domain }}.conf

  - name: set up the wp-cron schedule
    # Ansible crons default to every minute. Using the more verbose
    # action/args syntax because that command has too many funny characters.
    action: cron
    args:
      user: "{{ webmaster }}"
      state: present
      name: wp-cron
      job: "curl -H'Host: {{wordpress_domain}}'
              'localhost/wp-cron.php?doing_wp_cron=1' > /dev/null"
